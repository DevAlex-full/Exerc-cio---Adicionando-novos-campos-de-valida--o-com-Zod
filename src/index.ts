// src/index.ts
import { z } from 'zod';

// Schema de valida√ß√£o completo
const userSchema = z.object({
  email: z
    .string()
    .min(1, 'Email √© obrigat√≥rio')
    .email('Email inv√°lido'),
  
  password: z
    .string()
    .min(6, 'Senha deve ter no m√≠nimo 6 caracteres'),
  
  confirmPassword: z
    .string()
    .min(1, 'Confirma√ß√£o de senha √© obrigat√≥ria'),
  
  // NOVO CAMPO: Telefone
  telefone: z
    .string()
    .min(1, 'Telefone √© obrigat√≥rio')
    .min(10, 'Telefone deve ter no m√≠nimo 10 d√≠gitos')
    .max(11, 'Telefone deve ter no m√°ximo 11 d√≠gitos')
    .regex(/^\d+$/, 'Telefone deve conter apenas n√∫meros')
}).refine((data) => data.password === data.confirmPassword, {
  message: 'As senhas n√£o coincidem',
  path: ['confirmPassword']
});

// Tipo TypeScript inferido do schema
type UserFormData = z.infer<typeof userSchema>;

// ========================================
// TESTES DO SCHEMA
// ========================================

console.log('=== TESTANDO VALIDA√á√ïES ===\n');

// Teste 1: Dados v√°lidos
console.log('üìã Teste 1 - Dados v√°lidos:');
try {
  const validData = userSchema.parse({
    email: 'usuario@email.com',
    password: 'senha123',
    confirmPassword: 'senha123',
    telefone: '11987654321' // 11 d√≠gitos v√°lidos
  });
  console.log('‚úÖ Valida√ß√£o passou!');
  console.log('Dados:', validData);
} catch (error) {
  if (error instanceof z.ZodError) {
    console.log('‚ùå Erros:', error.issues);
  }
}

console.log('\n---\n');

// Teste 2: Telefone muito curto (9 d√≠gitos)
console.log('üìã Teste 2 - Telefone com 9 d√≠gitos (inv√°lido):');
try {
  userSchema.parse({
    email: 'usuario@email.com',
    password: 'senha123',
    confirmPassword: 'senha123',
    telefone: '119876543' // 9 d√≠gitos - INV√ÅLIDO
  });
  console.log('‚úÖ Valida√ß√£o passou!');
} catch (error) {
  if (error instanceof z.ZodError) {
    console.log('‚ùå Erros encontrados:');
    error.issues.forEach((err: z.ZodIssue) => {
      console.log(`  - ${err.path.join('.')}: ${err.message}`);
    });
  }
}

console.log('\n---\n');

// Teste 3: Telefone com letras
console.log('üìã Teste 3 - Telefone com letras (inv√°lido):');
try {
  userSchema.parse({
    email: 'usuario@email.com',
    password: 'senha123',
    confirmPassword: 'senha123',
    telefone: '1198765abc1' // Cont√©m letras - INV√ÅLIDO
  });
  console.log('‚úÖ Valida√ß√£o passou!');
} catch (error) {
  if (error instanceof z.ZodError) {
    console.log('‚ùå Erros encontrados:');
    error.issues.forEach((err: z.ZodIssue) => {
      console.log(`  - ${err.path.join('.')}: ${err.message}`);
    });
  }
}

console.log('\n---\n');

// Teste 4: Telefone muito longo (12 d√≠gitos)
console.log('üìã Teste 4 - Telefone com 12 d√≠gitos (inv√°lido):');
try {
  userSchema.parse({
    email: 'usuario@email.com',
    password: 'senha123',
    confirmPassword: 'senha123',
    telefone: '119876543210' // 12 d√≠gitos - INV√ÅLIDO
  });
  console.log('‚úÖ Valida√ß√£o passou!');
} catch (error) {
  if (error instanceof z.ZodError) {
    console.log('‚ùå Erros encontrados:');
    error.issues.forEach((err: z.ZodIssue) => {
      console.log(`  - ${err.path.join('.')}: ${err.message}`);
    });
  }
}

console.log('\n---\n');

// Teste 5: Telefone com 10 d√≠gitos (v√°lido)
console.log('üìã Teste 5 - Telefone com 10 d√≠gitos (v√°lido):');
try {
  const validData = userSchema.parse({
    email: 'usuario@email.com',
    password: 'senha123',
    confirmPassword: 'senha123',
    telefone: '1187654321' // 10 d√≠gitos - V√ÅLIDO
  });
  console.log('‚úÖ Valida√ß√£o passou!');
  console.log('Telefone:', validData.telefone);
} catch (error) {
  if (error instanceof z.ZodError) {
    console.log('‚ùå Erros:', error.issues);
  }
}

console.log('\n---\n');

// Teste 6: M√∫ltiplos erros
console.log('üìã Teste 6 - M√∫ltiplos erros:');
try {
  userSchema.parse({
    email: 'email-invalido',
    password: '123', // Muito curta
    confirmPassword: '456', // N√£o coincide
    telefone: 'abc' // Inv√°lido
  });
  console.log('‚úÖ Valida√ß√£o passou!');
} catch (error) {
  if (error instanceof z.ZodError) {
    console.log('‚ùå Erros encontrados:');
    error.issues.forEach((err: z.ZodIssue) => {
      console.log(`  - ${err.path.join('.')}: ${err.message}`);
    });
  }
}

// Exportar o schema para uso em outros m√≥dulos
export { userSchema, type UserFormData };